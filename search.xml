<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[慢谈继承]]></title>
      <url>/2017/11/06/%E6%85%A2%E8%B0%88%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>让我们先看几张图</p>
<p>
  <img src="/MyImages/10.jpeg" alt="这里是图片">
</p>
<p>
  <img src="/MyImages/11.jpeg" alt="这里是图片">
</p>
<p>//约定
  <br>function Fun(){
  <br> //私有属性
  <br> var val = 1;// 私有基本属性
  <br> var arr = [1]; // 私有引用属性
  <br> function f(){} // 私有函数（引用属性）</p>
<pre><code>//实例属性
this.val = 1;     // 实例基本属性
this.arr = [1];// 实例引用属性
this.f = function(){}   // 实例函数（引用属性）
</code></pre>
<p>}
  <br>//原型属性
  <br>Fun.prototype.val = 1;// 原型基本属性
  <br>Function.prototype.arr = [1]; // 原型引用属性
  <br>Fun.prototype.f = function(){}; // 原型函数（引用属性）</p>
<p>//简单原型链继承
  <br>function A(){
  <br> this.val = 1;
  <br> this.arr = [1];
  <br>}
  <br>function B(){}
  <br>//拿父类实例来充当子类原型对象
  <br>B.prototype = new A();//核心</p>
<p>var b1 = new B();
  <br>var b2 = new B();</p>
<p>b1.val = 2;
  <br>b1.arr.push(2);</p>
<p>console.log(b1.arr)//2
  <br>console.log(b2.arr)//1
  <br>//修改b1.arr后b2.arr也变了，因为来自原型对象的引用属性是所有实例共享的。
  <br>//创建子类实例时，无法向父类构造函数传参
  <br>console.log(b1.arr)//1,2
  <br>console.log(b2.arr)//1,2</p>
<p>############################################################################################</p>
<p>//构造函数继承
  <br>function A(x){
  <br> this.x = x;
  <br> this.arr = [1];
  <br> this.f = function(){}
  <br>}
  <br>function B(y){
  <br> //借父类的构造函数来增强子类实例，等于是把父类的实例属性复制了一份给子类实例装上了（完全没有用到原型）
  <br> A.call(this,y) // 核心</p>
<p>}</p>
<p>var b1 = new B(1);
  <br>var b2 = new B(2);</p>
<p>b1.arr.push(2);</p>
<p>console.log(b1.x);//1
  <br>console.log(b2.x);//2</p>
<p>console.log(b1.arr)//1,2
  <br>console.log(b2.arr)//1
  <br>//无法实现函数复用，每个子类实例都持有一个新的fun函数，太多了就会影响性能，内存爆炸。。
  <br>console.log(b1.f === b2.f) //false</p>
<p>############################################################################################</p>
<p>//组合继承
  <br>function A(){
  <br> this.x = 1;
  <br> this.arr = [1]
  <br>}
  <br>A.prototype.f1 = function(){}
  <br>A.prototype.f2 = function(){}</p>
<p>function B(){
  <br> A.call(this);
  <br>}</p>
<p>B.prototype = new A();
  <br>//把实例函数都放在原型对象上，以实现函数复用。
  <br>//同时还要保留借用构造函数方式的优点，通过Super.call(this);
  <br>//继承父类的基本属性和引用属性并保留能传参的优点；
  <br>//通过Sub.prototype = new Super();
  <br>//继承父类函数，实现函数复用
  <br>var b1 = new B(1);
  <br>var b2 = new B(2);</p>
<p>console.log(b1.f === b2.f)//true
  <br>//子类原型上有一份多余的父类实例属性，因为父类构造函数被调用了两次，
  <br>//生成了两份，而子类实例上的那一份屏蔽了子类原型上的</p>
<p>############################################################################################</p>
<p>//寄生组合继承
  <br>function Bus(obj){
  <br> var F = function(){}
  <br> F.prototype = obj;
  <br> return new F();
  <br>}
  <br>function A(){
  <br> this.x = 1;
  <br> this.arr = [1];
  <br>}</p>
<p>A.prototype.f = function(){}</p>
<p>function B(){
  <br> A.call(this)
  <br>}
  <br>//用Bus(A.prototype)切掉了原型对象上多余的那份父类实例属性
  <br>var proto = Bus(A.proto);
  <br>proto.constructor = B;
  <br>B.prototype = proto;</p>
<p>var b1 = new B();</p>
<p>############################################################################################</p>
<p>//原型继承，Object.create()函数，内部就是原型式继承
  <br>function Bus(obj){
  <br> var F = function(){};
  <br> F.prototype = obj;
  <br> return new F();
  <br>}
  <br>function A(){
  <br> this.x = 1;
  <br> this.arr = [1];
  <br>}</p>
<p>var a = new A();;
  <br>//Bus函数得到得到一个“纯洁”的新对象（“纯洁”是因为没有实例属性），再逐步增强之（填充实例属性）
  <br>var b = Bus(a);</p>
<p>b.z = 2;
  <br>console.log(b.x)//1;
  <br>console.log(b.arr)//1;
  <br>console.log(b.z)//2</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见入门算法]]></title>
      <url>/2017/11/06/%E5%B8%B8%E8%A7%81%E5%85%A5%E9%97%A8%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>1、斐波那契数列</p>
<p>function fibonacci(n){
  <br> if(n==1 || n==2) return 1;
  <br> return fibonacci(n-1)+fibonacci(n-2)
  <br>}</p>
<p>2、快排</p>
<p>var quickSort = function(arr) {
  <br>　　if (arr.length &lt;= 1) { return arr; }
  <br>　　var pivotIndex = Math.floor(arr.length / 2);
  <br>　　var pivot = arr.splice(pivotIndex, 1)[0];
  <br>　　var left = [];
  <br>　　var right = [];
  <br>　　for (var i = 0; i &lt; arr.length; i++){
  <br>　　　　if (arr[i] &lt; pivot) {
  <br>　　　　　　left.push(arr[i]);
  <br>　　　　} else {
  <br>　　　　　　right.push(arr[i]);
  <br>　　　　}
  <br>　　}
  <br>　　return quickSort(left).concat([pivot], quickSort(right));
  <br>};</p>
<p>3、数组去重</p>
<p>原始方法
  <br>Array.prototype.uniq = function () {
  <br> var resArr = [];
  <br> var flag = true;</p>
<p> for(var i=0;i&lt;this.length;i++){
  <br> if(resArr.indexOf(this[i]) == -1){
  <br> if(this[i] != this[i]){ //排除 NaN
  <br> if(flag){
  <br> resArr.push(this[i]);
  <br> flag = false;
  <br> }
  <br> }else{
  <br> resArr.push(this[i]);
  <br> }
  <br> }
  <br> }
  <br> return resArr;
  <br>}</p>
<p>ES6</p>
<p>function Unique(arr){
  <br> return Array.from(new Set(arr))
  <br>}</p>
<p>4、去掉左右两侧空格</p>
<p>var reg = /^\s
  <em>|\s</em>$/g;
  <br>var str = “”;
  <br>str.replace(reg, “”)</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组以及数组中的坑]]></title>
      <url>/2017/11/06/%E6%95%B0%E7%BB%84%E4%BB%A5%E5%8F%8A%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>一说到数组，都是眼泪😢，原生的JS数组包含了太多种方法！！！更别说JQ例了
  <br>可以说，一遇到数组这个小婊砸，真是有的玩了。。。</p>
<p>让我们举几个常见的 🌰 吧</p>
<p>1、合并两个数组</p>
<p>function concat(arr1, arr2) {
  <br> return arr1.concat(arr2)
  <br>}</p>
<p>2、数组中某个值出现次数</p>
<p>function count(arr, item) {
  <br> var count = arr.filter(function(a) {
  <br> return a === item;
  <br> });
  <br> return count.length;
  <br>}</p>
<p>3、数组中某元素位置</p>
<p>function indexOf(arr,item){
  <br> return arr.indexOf(item)
  <br>}</p>
<p>4、数组中重复数据并排序</p>
<pre><code>function duplicates(arr) {
    var a=[];
    var b=[];
    for(var i=0; i&lt;arr.length;i++){
        if(a.indexOf(arr[i]) == -1){
            a.push(arr[i]);
        }else if(b.indexOf(arr[i]) == -1){
            b.push(arr[i]);
        }
    }
    return b;
}
</code></pre>
<p>5、数组开头增加元素</p>
<p>function prepend(arr, item) {
  <br> var newArr = arr.slice(0)
  <br> newArr.unshift(item)
  <br> return newArr
  <br>}</p>
<p>6、数组末尾增加一个元素</p>
<p>function append(arr, item) {
  <br> var newArr = arr.slice(0)
  <br> newArr.push(item)
  <br> return newArr;</p>
<p>}</p>
<p>7、数组某个位置插入某个值</p>
<p>function insert(arr, item, index) {
  <br> var a = arr.slice(0)
  <br> a.splice(index,0,item)
  <br> return a
  <br>}</p>
<p>8、数组求二次方</p>
<p>function square(arr) {
  <br> return arr.map(function(x){
  <br> return x*x;
  <br> })
  <br>}</p>
<p>9、数组求和</p>
<p>(function() {
  <br> var sum = 0;
  <br> function getSum(array){
  <br> for (var i = 0; i &lt; array.length; i++){
  <br> sum += parseInt(array[i]);
  <br> }
  <br> return sum;
  <br>})()</p>
<p>10、移除数组中与X相等的值</p>
<pre><code>function removeWithoutCopy(arr, item) {
    var index;
    for(var i= 0; i&lt;arr.length ; i++){
        if(arr[i] == item){
            arr.splice(i,1)
            i--;
        }
    }
    return arr;
}
</code></pre>
<p>11、移除数组最后一位返回新数组</p>
<p>function truncate(arr) {
  <br> return arr.slice(0,arr.length-1)
  <br>}</p>
<p>12、移除数组第一位元素</p>
<p>function curtail(arr) {
  <br> return arr.slice(1)
  <br>}</p>
<p>13、移除数组返回新数组</p>
<pre><code>function remove(arr, item) {
    var newArr = [];
    for(var i=0;i&lt;arr.length;i++){
        if(arr[i]!=item){
            newArr.push(arr[i])
        }
    }
    return newArr;

}
</code></pre>
<p>14、移除数组返回本数组</p>
<p>function removeWithoutCopy(arr, item) {
  <br> var i = arr.indexOf(item)
  <br> if(i &gt; -1){
  <br> return arr.splice(index,1)
  <br> }
  <br>}</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[媒体查询]]></title>
      <url>/2017/11/06/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>@media（min-width:768px）
  <br>@media screen and (max-width: 300px) {
  <br> body {
  <br> background-color:lightblue;
  <br> }
  <br>}
  <br>响应式的页面
  <br>　　　　　　width/height：浏览器可视宽度(也叫视口)/浏览器可见高度.</p>
<p>　　　　　　device-width/device-height：设备屏幕宽度/设备屏幕高度.</p>
<p>　　　　　 color:检测颜色的位数。（例如：min-color:32 就是检测设备是否拥有32位颜色 #000000）</p>
<p>　　　　　 color-index:检查设备索引颜色表中的颜色(颜色值不能小于0)。</p>
<p>　　　　　　orientation：判断当前设备是横屏还是竖屏.</p>
<p>　　　　　 aspect-ratio:检测浏览器可视宽度和高度的比例。(现在宽高比为16:9是最佳的，比如我做的直播窗口，要求宽高比就是16:9)</p>
<p>　　　　　　device-aspect-ratio:检测设备的宽度和高度的比例。</p>
<p>　　　　　 resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。</p>
<p>　　　　　 grid：检测输出的设备是网格设备的还是位图设备。</p>
<p>　　　　　 monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个很少用得到）</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> H5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栅格化布局]]></title>
      <url>/2017/11/06/%E6%A0%85%E6%A0%BC%E5%8C%96%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>假设：Flowline的宽度为W，column的宽度为c，Gutter的宽度为g，Margin的宽度为m，栅格列数为N</p>
<pre><code>W = c*N + g*(N-1) + 2m；g的宽度通常为m的两倍，所以：
</code></pre>
<p>　　 W = (c+g) * N；把c+g记为C，得：</p>
<p>　　 W = C * N;</p>
<p>Bootstrap的栅格系统
  <br>BootStrap中合理的使用栅格布局，必须将列放入row中，而row必须放入container中。container类在布局中主要有两个作用：
  <br>在不同的宽度区间内（响应式断点）提供宽度限制。当宽度变化时，采用不同的宽度。
  <br>提供一个padding，阻止内部内容触碰到浏览器边界。</p>
<p>Row是column的容器，每个row中的column之和必须为12，不过我们可以通过嵌套的方式扩展。Row的左右margin都为-15px，
  <br>用来抵消container中的padding，如下图蓝色部分所示：</p>
<p>Colomn是栅格系统的主角，每个column左右padding都为15px，上文中row的负margin抵消了container的padding，
  <br>所以为每个column设置padding就是为了防止内容直接触碰边界，同时不同的column之间拥有30px的卡槽（Gutter）</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建对象的几种方式]]></title>
      <url>/2017/11/06/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>没有对象的 看过来 看过来</p>
<p>1、工厂模式</p>
<p>function createPerson(name,age,job){
  <br> var obj = new Object();
  <br> obj.name = name;
  <br> obj.age = age;
  <br> obj.job = job;
  <br> obj.sayHello = function(){
  <br> alert(‘hello!’)
  <br> }</p>
<pre><code>return obj
</code></pre>
<p>}</p>
<p>var p1 = createPerson(‘nini’,29,’worker’);
  <br>var p2 = createPerson(‘cc’,33,’doctor’)</p>
<p>2、构造函数方式</p>
<p>function Person(name,age){
  <br> this.name = name;
  <br> this.age = age;
  <br> this.say = function(){
  <br> alert(‘hello’)
  <br> }
  <br>}</p>
<p>var p1 = new Person(…);
  <br>var p2 = new Person(…);</p>
<p>3、原型模式</p>
<p>function Person(){}
  <br>Person.prototype.name = “nini”;
  <br>Person.prototype.age = 12;
  <br>Person.prototype.say = function(){}</p>
<p>var p1 = new Person();
  <br>p1.say();
  <br>p1.name;</p>
<p>function Person(){
  <br>}</p>
<p>Person.prototype={
  <br> name:”…”,
  <br> age:29,
  <br> job:”…”,
  <br> sayName:function(){
  <br> …
  <br> }
  <br>};</p>
<p>Object.defineProperty(Person.prototype,”constructor”,{
  <br> enumerable:false,
  <br> value:Person,
  <br>});</p>
<p>4、混合模式</p>
<p>function Person(name,age,job){
  <br> this.name = name;
  <br> this.age = age;
  <br> this.job = job;
  <br>}</p>
<p>Person.prototype = {
  <br> constructor:Person,
  <br> say:function(){
  <br> alert(this.name)
  <br> }
  <br>}</p>
<p>var p1 = new Person(…)</p>
<p>5、动态原型</p>
<p>function Person(name,age,job){
  <br> this.name = name;
  <br> this.age = age;
  <br> this.job = job
  <br> if(typeof this.sayName != “function”){
  <br> Person.prototype.say = function(){
  <br> alert(this.name)
  <br> }
  <br> }
  <br>}</p>
<p>6、对象字面量</p>
<p>var person = {
  <br> name:’aa’,
  <br> age:19,
  <br> say:function(){</p>
<pre><code>}
</code></pre>
<p>}</p>
<p>person.say();
  <br>//对象字面量是一个表达式，这个表达式的每次运算都将创建并初始化一个新的对象
  <br>//每次计算对象字面量的时候，也都会计算它每个属性的值。
  <br>//也就是说，如果在一个重复调用的函数中的循环体内使用了对象字面量，
  <br>//它将创建很多新对象，并且每次创建的新对象的属性值也有可能不同。</p>
<p>7、object实例</p>
<p>var person = new Object();
  <br>person.name = “aa”;
  <br>person.age = 19;
  <br>person.say = function(){</p>
<p>}</p>
<p>person.name()</p>
<p>8、Object.create（）</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型链的理解]]></title>
      <url>/2017/11/06/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>原型链
  <br>其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。
  <br>每个构造函数都有一个原型对象,每个原型对象都包含一个指向构造函数的指针,而实例则包含一个指向原型对象的指针。
  <br>假如让A原型对象等于B构造函数的实例，那么A原型对象就会有一个[[Prototype]]指针指向B原型对象，
  <br>同时B原型对象的constructor属性又指向了B构造函数；
  <br>假如让B原型对象等于C构造函数的实例，上述关系依然成立；
  <br>如此层层递进，从而实现了实例与原型之间的链接；这就是原型链的基本概念。</p>
<p>下面是我画的一张图，方便理解吧 👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p>
<p>
  <img src="/MyImages/7.jpeg" alt="这里是图片">
</p>
<p>
  <img src="/MyImages/8.jpeg" alt="这里是图片">
</p>
<p>
  <img src="/MyImages/9.jpeg" alt="这里是图片">
</p>
<p>既然如此，Object构造函数是最顶层的构造函数，所有函数的默认原型都是Object的实例，
  <br>因此默认原型都会包含一个[[Prototype]]指针，指向Object.prototype；
  <br>这也是所有自定义类型都会继承Object类型所拥有的实例和方法的根本原因。</p>
<p>确认原型和实例之间的关系
  <br>instanceof操作符；只要是原型链上出现过的构造函数，都会返回true。instanceof操作符的本质在于：左边的操作数的原型链上是否有右边的操作数的prototype属性。
  <br>isPrototypeOf()方法，只要是原型链上出现过的原型，都会返回true</p>
<p>function A(name){
  <br> this.name = name;
  <br>};
  <br>A.prototype.sayName = function(){
  <br> alert(this.name);
  <br>};
  <br>function B(age){
  <br> this.age = age;
  <br>};
  <br>B.prototype = new A();
  <br>B.prototype.sayAge = function(){
  <br> alert(this.age);
  <br>};
  <br>var x = new B();
  <br>x.name = “CC”;</p>
<p>console.log(x.sayName()); //“CC”
  <br>console.log(x instanceof B); //true
  <br>console.log(x instanceof A); //true
  <br>console.log(x instanceof Object); //true
  <br>console.log(Object.prototype.isPrototypeOf(x)); //true
  <br>console.log(A.prototype.isPrototypeOf(x)); //true
  <br>console.log(B.prototype.isPrototypeOf(x)); //true</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对象问题]]></title>
      <url>/2017/11/03/%E5%AF%B9%E8%B1%A1%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>对象，一直是让小仙女头疼的问题。。。</p>
<p>先说说最基础的属性吧，什么是对象的属性?</p>
<p>//数据属性与访问器属性
  <br>//数据属性即有值的属性,访问器属性是用来设置getter和setter的,//在属性名前加上”_”（下划线）表示该属性只能通过访问器访问（私有属性)</p>
<p>数据属性具有4个描述其行为的特性：
  <br>1、Configurable：能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性。
  <br> 默认为true。
  <br>2、Enumerable：表示能否通过for-in循环返回属性。默认为true
  <br> 除了for-in循环之外，ECMAScript5定义了两个用以枚举属性名称的函数
  <br> Object.keys()：返回一个数组，这个数组由对象中可枚举的自有属性的名称组成。
  <br> Object.getOwnPropertyNames()：返回对象的所有自有属性的名称，而不仅限于可枚举的属性
  <br>3、Writable：能否修改属性的值。默认为true。
  <br>4、Value： 包含这个属性的数据值；读取属性值的时候，从这个位置读取；写入属性值的时候，把值保存在这里。
  <br> 特性默认为undefined。</p>
<p>访问器属性
  <br>包含一对getter和setter方法。访问器属性有如下4个特性：
  <br>1、Configurable
  <br>2、Enumerable
  <br>3、Get：在读取属性时调用的函数；默认值为undefined。在读取访问器属性时，会调用gette方法，这个函数负责返回有效的值。
  <br>4、Set：在写入属性时调用的函数；默认值为undefined。在写入访问器属性时，会调用setter方法并传入新值，这个函数负责决定如何处理数据。
  <br> 访问器属性不能直接定义，必须使用Object.defineProperties()方法来定义。</p>
<p>属性的特性规则
  <br>1、如果对象是不可扩展的，则可以编辑已有的自有属性，但不能添加新属性；
  <br>2、如果属性是不可配置的，则不能修改它的可配置性和可枚举性
  <br>3、如果访问器属性是不可配置的，则不能修改其getter和setter方法</p>
<p>🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚🔚</p>
<p>通过描述符一次性定义多个属性；
  <br>接收两个对象参数：第一个对象是要添加或修改其属性的对象；第二个对象的属性与第一个对象中要添加或修改的属性一一对应。
  <br>var person = {}
  <br>Object.defineProperties(person,{
  <br> name:{
  <br> value:”cc”
  <br> },
  <br> age:{
  <br> value:23,
  <br> writable:false
  <br> }
  <br>})</p>
<p>//要修改数据属性默认的特性，必须使用ECMAScript5中的Object.defineProperty()方法
  <br>//三个参数：属性所在的对象、属性的名字、描述符对象
  <br>//数据属性描述符对象的属性必须是：configurable、enumerable、writable、value
  <br>//访问器属性的描述符对象的属性有configurable、enumerable、get、set。
  <br>//设置其中的一个或多个值，可以修改对应的特性值。
  <br>var person = {};
  <br>Object.defineProperty(person,”name”,{
  <br> witable:false,
  <br> value:”CC”
  <br> //如果不指定，configurable、enumerable、writable特性的值都是false。
  <br>})
  <br>console.log(person.name);//CC
  <br>person.name = “VV”;
  <br>console.log(person.name)//CC
  <br>//注意：使用Object.defineProperty()方法，要么修改已有属性，要么新建自有属性，不能修改继承属性。</p>
<p>可以取得给定属性的描述符
  <br>接收两个参数：属性所在的对象，要读取其描述符的属性名称。
  <br>返回值是一个对象
  <br>//Object.getOwnPropertyDescriptor()方法，只能用于实例属性
  <br>var person = {};
  <br>Object.defineProperties(person, {
  <br> name: {
  <br> value: “CC”,
  <br> writable: true
  <br> },
  <br> age: {
  <br> value: 23,
  <br> writable: false
  <br> }
  <br>});
  <br>var descriptor = Object.getOwnPropertyDescriptor(person, “name”);
  <br>alert(descriptor.value); //“CC”
  <br>alert(descriptor.writable); //true</p>
<p>使用arguments</p>
<p>function useArguments() {
  <br> var result = Array.prototype.reduce.call(arguments,function(a,b){return a+b;});
  <br> return result;
  <br>}</p>
<p>遍历对象
  <br>function iterate(obj) {
  <br> return Object.getOwnPropertyNames(obj).map(function(key){
  <br> return key+”: “+obj[key];
  <br> });
  <br>}</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[等高布局的五种方式]]></title>
      <url>/2017/11/03/%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>方法一：伪等高
  <br>这种方式，并不是真正的实现了元素等高
  <br>上代码喽</p>
<pre><code>&lt;style&gt;
    *{
        margin: 0;
    }
    .p{
        position: relative;
    }
    .left{
        position: absolute;
        top:0;
        left: 0;
        width:100px;
        background: green
    }
    .right{
        position: absolute;
        top: 0;
        right: 0;
        width:200px;
        background: pink;
    }
    .center{
        box-sizing:border-box;
        background-clip: content-box;
        padding:0 20px;
        border-left: 100px solid green;
         border-right: 200px solid pink;
        background: red;
    }

&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;par&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;
            &lt;p&gt;jjj&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;center&quot;&gt;
            &lt;p&gt;lllll&lt;/p&gt;
            &lt;p&gt;jkljlkjl&lt;/p&gt;
            &lt;p&gt;jlskjldjsas&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;
            &lt;p&gt;;;;;&lt;/p&gt;
            &lt;p&gt;jjjjj&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>结果：</p>
<p>
  <img src="/MyImages/4.png" alt="这里是图片">
</p>
<p>方法二：伪等高</p>
<pre><code>&lt;style&gt;
    *{
        margin:0;
    }
    .par{
        overflow: hidden;
    }
    .left{
        float: left;
        width: 20%;
        padding-bottom: 9999px;
        margin-bottom: -9999px;
        background: red;
    }
    .center{
        margin:0 20px;
        background: pink;
    }
    .right{
        float: right;
        width: 20%;
        padding-bottom: 9999px;
        margin-bottom: -9999px;
        background: red;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;par&quot;&gt;
        &lt;div class=&quot;left&quot;&gt;
            &lt;p&gt;jjj&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;
            &lt;p&gt;;;;;&lt;/p&gt;
            &lt;p&gt;jjjjj&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;center&quot;&gt;
            &lt;p&gt;lllll&lt;/p&gt;
            &lt;p&gt;jkljlkjl&lt;/p&gt;
            &lt;p&gt;jlskjldjsas&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;    
&lt;/body&gt;
</code></pre>
<p>结果：</p>
<p>
  <img src="/MyImages/5.png" alt="这里是图片">
</p>
<p>方法三：真等高</p>
<pre><code>&lt;style&gt;
    body,p{margin: 0;}
    .parent{
        display: table;
        width: 100%;
        table-layout: fixed;
    }
    .left,.centerWrap,.right{
        display: table-cell;
    }
    .center{
        margin: 0 20px;
    }
&lt;/style&gt;
&lt;body&gt;
&lt;div class=&quot;parent&quot; style=&quot;background-color: lightgrey;&quot;&gt;
    &lt;div class=&quot;left&quot; style=&quot;background-color: lightblue;&quot;&gt;
        &lt;p&gt;left&lt;/p&gt;
    &lt;/div&gt;  
    &lt;div class=&quot;centerWrap&quot;&gt;
        &lt;div class=&quot;center&quot; style=&quot;background-color: pink;&quot;&gt;
            &lt;p&gt;center&lt;/p&gt;
            &lt;p&gt;center&lt;/p&gt;
        &lt;/div&gt;         
    &lt;/div&gt; 
    &lt;div class=&quot;right&quot; style=&quot;background-color: lightgreen;&quot;&gt;
        &lt;p&gt;right&lt;/p&gt;
    &lt;/div&gt;        
&lt;/div&gt;
</code></pre>
<p>结果：</p>
<p>
  <img src="/MyImages/6.png" alt="这里是图片">
</p>
<p>方法四：真等高</p>
<p>//设置子元素的top:0;bottom:0</p>
<pre><code>body,p{
    margin: 0;
}
.parent{
    position: relative;
    height: 40px;
}
.left,.center,.right{
    position: absolute;
    top: 0;
    bottom: 0;
}
.left{
    left: 0;
    width: 100px;
}
.center{
    left: 120px;
    right: 120px;
}
.right{
    width: 100px;
    right: 0;
}
</code></pre>
<p>方法五：flex</p>
<pre><code>&lt;!-- 　flex中的伸缩项目默认都拉伸为父元素的高度，也实现了等高效果 --&gt;
body,p{
    margin: 0;
}
.parent{
    display: flex;
}
.left,.center,.right{
    flex: 1;
}
.center{
    margin: 0 20px;
}
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文字分割线问题]]></title>
      <url>/2017/11/03/%E6%96%87%E5%AD%97%E5%88%86%E5%89%B2%E7%BA%BF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>前两天在一个项目里，小仙女可是被这个分割线问题气死了
  <br>😠😠😠😠😠😠😠</p>
<p>不知道小可爱们会不会遇到下面的问题 看下面 👇👇👇👇👇👇👇👇</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
    div{
        padding: 0 20px 0;
        margin: 20px 0;
        line-height: 1px;
        border-left: 200px solid #ddd;
        border-right: 200px solid #ddd;
        text-align: center;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div&gt;hkjhjhjhkhkj&lt;/div&gt;

&lt;/body&gt;
</code></pre>
<p>这样 原本看上去 很美好😊😊😊😊😊😊😊😊</p>
<p>but 当你将屏幕横向拉伸的时候 苦逼的事情就粗线了 😨 看这里 👇👇👇👇</p>
<p>
  <img src="/MyImages/1.png" alt="这里是图片">
</p>
<p>AND 看这里 👇👇👇👇👇</p>
<p>
  <img src="/MyImages/2.png" alt="这里是图片">
</p>
<p>真是要疯掉了，人家想要的是无论什么情况下，都是介个样子滴 👇👇👇👇👇</p>
<p>
  <img src="/MyImages/3.png" alt="这里是图片">
</p>
<p>蓝瘦香菇😭 So 基于上线的小仙女 想了一个办法，总算可以解决这个问题，but 不一定是最好的，但是可以参考一下啦！！！！</p>
<p>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</p>
<pre><code>&lt;style&gt; 
    .flex{
        list-style:none;
        display:-webkit-flex;
        padding:0;
        margin:0;
        color:#fff;
    }
    .red{
        background-color: red;
        flex:2;
    }
    .blue{
        background-color:green;
        flex:3;
        text-align: center;
    }
    .green{
        background-color:red;
        flex:2;
    }

    .three-column {
        width: 100%;
        height: 500px;
        display: box;
        display: -webkit-box;
        display: flex;
    }

    .two {
        -webkit-box-flex: 1;
        flex: 1
    }

    .one, .three {
        width: 200px;
    }
&lt;/style&gt;

&lt;body&gt;
    &lt;ul class=&quot;flex&quot;&gt;
        &lt;li class=&quot;red&quot;&gt;11&lt;/li&gt;
         &lt;li class=&quot;blue&quot;&gt;jjjjj&lt;/li&gt;
         &lt;li class=&quot;green&quot;&gt;33&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于多栏布局和自适应问题]]></title>
      <url>/2017/11/03/%E5%85%B3%E4%BA%8E%E5%A4%9A%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>今天我们来谈谈多栏布局吧！Let’s Go 🚄🚄🚄🚄🚄</p>
<p>下面是我日常遇见过得双栏布局和三栏布局，当然还有其他布局模式，BUT今天就先说说这两个吧</p>
<p>①、关于两栏布局：
  <br>两栏布局顾名思义就是主内容分为左右两侧各有一栏。实现两栏布局有很多种办法在这里，我将最常见的几种方法列举出来</p>
<p>方法一：最简单粗暴的方式，百分比这里我就不写出来了，相信大家都会
  <br>方法二：BFC方式</p>
<pre><code>&lt;style&gt;
     #header, #footer{ 
        height: 100px;
        background: red;
     }
     #content .right{
         height: 200px;
         background: green;
         overflow: auto;
     }
     #content .left{
         height: 200px;
         width: 100px;
         background: blue;
         float: left;
     }
 &lt;/style&gt;
</code></pre>

<body>
  <br>
  <div id="header"></div>
  <br>
  <div id="content">
    <br>
    <div class="left"></div>
    <br>
    <div class="right">
      <br> right right right right right right
      <br> </div>
    <br> </div>
  <br>
  <div id="footer"></div>
  <br> </body>

<p>原理：将左侧区域浮动，再讲右侧区域设置auto，形成BFC独立区域，块级上下文</p>
<p>方法三：负边距大法</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
     html,body{
         padding: 0;
         margin: 0;
     }
     #header, #footer{ 
         height: 100px;
         background: red;
        overflow: hidden;
      }
     #main{
        overflow: auto;
     }
     #main .center{
         height: 200px;
        width: 100%;
         float: left;
     }
    .center .content{
        height: 200px;
        background: green;
        margin-right: 100px;
    }
     #main .aside{
         height: 200px;
         width: 100px;
         background: blue;
         float: left;
        margin-left: -100px;
     }
 &lt;/style&gt;
</code></pre>
<p>
  
  <br>

  <body>
    <br>
    <div id="header">header</div>
    <br>
    <div id="main">
      <br>
      <div class="center">
        <br>
        <div class="content">
          <br> 我是主区块 我是主区块 main main main
          <br> </div>
        <br> </div>
      <br>
      <div class="aside"></div>
      <br> </div>
    <br>
    <div id="footer">footer</div>
</body></p>
<p>当需要自适应的时候</p>
<pre><code>#left {
    float: left;
    background-color: red;
}
#right {
    overflow: hidden;
    background-color: blue;
}
</code></pre>
<p>或者
  <br> .left{
  <br> position:absolute;
  <br> // margin-left: -200px;
  <br> height:400px;
  <br> width:200px;
  <br> background-color:blue;
  <br> }
  <br> .right{
  <br> padding-left:200px;
  <br> background-color:red;
  <br> }
  <br>再或者
  <br> .left-3{
  <br> position:relative;
  <br> padding-right: 200px;//留出右侧内边距
  <br> height:300px;
  <br> background-color:yellow;
  <br> }
  <br> .right-3{
  <br> position:absolute;//绝对定位到右边
  <br> right:0;
  <br> height:400px;
  <br> background-color:#808080;
  <br> }</p>
<p>②、关于三栏布局</p>
<p>三栏布局是在两栏布局的基础上进行的扩展</p>
<p>方法一：绝对定位法</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
    html，body{
        margin:0;
        height: 100%;
    }
    #left，#right{
        position: absolute;
        top: 0;
        width: 200px;
        height: 100px;
    }
    #left{
        left: 0;
    }
    #right{
        right: 0;
    }
    #main{
        margin: 0 210px;
        height: 100%;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;main&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>※如果中间栏含有最小宽度限制，或是含有宽度的内部元素，当浏览器宽度小到一定程度，会发生层重叠的情况</p>
<p>方法二：负margin法</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
    html，body{
        margin:0;
        height: 100%;
    }
    #left，#right{
        width: 200px;
        height: 100px;
        float:left;
    }
    #left{
        margin-left: -100%;
    }
    #right{
        margin-right: -200px;
    }
    #main,#body{
        margin: 0 210px;
        height:100%;
    }
    #main{
        width:100%;
        height: 100%;
        float:left;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div id=&quot;main&quot;&gt;
        &lt;div id=&quot;body&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;    
    &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>方法三：浮动</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
    .left{
            float:left;
            width:100px;
            height: 30px;
            background: red;
        }
        .right{
            float: right;
            width:150px;
            height: 30px;
            background: green;
        }
        .center{
            background: pink;
            height: 50px;
            margin-left: 100px;
            margin-right: 150px;
        }
&lt;/style&gt;

&lt;body&gt;
    &lt;div class=&quot;left&quot;&gt;11&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;333&lt;/div&gt;
    &lt;div class=&quot;center&quot;&gt;222&lt;/div&gt;
&lt;/body&gt;
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS常见问题]]></title>
      <url>/2017/11/03/CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>一、清除浮动的几种方式</p>
<p>1、额外标签法</p>
<pre><code>&lt;style&gt;
    .outer{
        border: 1px solid black;
        width: 300px;
    }
    .inner{
        width: 50px;
        height: 50px;
        background-color: #ff4400;
        margin-right: 20px;
        float: left;
    }
    .footer{
        background-color: #005FC3;
        width: 200px;
        height: 100px;
    }
    .clearfix{
        clear: both;
    }
&lt;/style&gt;

&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>2、使用:after 伪元素</p>
<pre><code>&lt;style&gt;
    .outer{
        border: 1px solid black;
        width: 300px;
    }
    .inner{
        width: 50px;
        height: 50px;
        background-color: #ff4400;
        margin-right: 20px;
        float: left;
    }
    .footer{
        background-color: #005FC3;
        width: 200px;
        height: 100px;
    }
    .clearfix:after{  /*最简方式*/
        content: &apos;&apos;;
        display: block;
        clear: both;
    }
    /* 新浪使用方式
    .clearfix:after{ 
        content: &apos;&apos;;
        display: block;
        clear: both;
        height: 0;
        visibility: hidden;
    }
    */
    .clearfix{ /*兼容 IE*/
        zoom: 1;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;outer clearfix&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>3、给父元素定高</p>
<pre><code>&lt;style&gt;
    .outer{
        border: 1px solid black;
        width: 300px;
    }
    .inner{
        width: 50px;
        height: 50px;
        background-color: #ff4400;
        margin-right: 20px;
        float: left;
    }
    .footer{
        background-color: #005FC3;
        width: 200px;
        height: 100px;
    }
    .clearfix{
        clear: both;
    }
&lt;/style&gt;

&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>4、利用overflow:hidden;属性</p>
<pre><code>&lt;style&gt;
    .outer{
        border: 1px solid black;
        width: 300px;
        overflow: hidden;
        zoom: 1;/*兼容 IE*/
    }
    .inner{
        width: 50px;
        height: 50px;
        background-color: #ff4400;
        margin-right: 20px;
        float: left;
    }
    .footer{
        background-color: #005FC3;
        width: 200px;
        height: 100px;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>5、父元素浮动</p>
<p>6、父元素处于绝对定位</p>
<pre><code>&lt;style&gt;
    .outer{
        border: 1px solid black;
        width: 300px;
        position: absolute;
    }
    .inner{
        width: 50px;
        height: 50px;
        background-color: #ff4400;
        margin-right: 20px;
        float: left;
    }
    .footer{
        background-color: #005FC3;
        width: 200px;
        height: 100px;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;div class=&quot;outer&quot;&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>二、小箭头问题</p>
<pre><code>&lt;div id=&quot;demo12&quot;&gt;&lt;/div&gt;
&lt;style&gt;
    #demo12 {
      border: 10px solid #000;
      border-left-color: #f00;
      width: 0;
      height: 0;
    }
&lt;/style&gt;
</code></pre>
<p>即通过调整“边框”厚度可以配置出任意角度
  <br>
  <div id="demo14">
</div></p>
<pre><code>&lt;/div&gt;

&lt;style&gt;
    #demo14 {
      border: 10px solid transparent;
      border-left: 20px solid #f00;
      width: 0;
      height: 0px;
    }
&lt;/style&gt;
</code></pre>
<p>三、rem和em的区别</p>
<p>em是相对于父元素的属性而计算的
  <br>Rem是相对于根元素’
  <html>‘</html></p>
<p>四、viewport都有什么</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;
</code></pre>
<p>让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求</p>
<p>五、常见的布局方式有哪些？</p>
<p>1、零布局 零布局的意思就是几乎完全按照正常文档流的方式来布局，不采用比如float，position，display等css属性。
  <br>2、display布局
  <br>3、float布局
  <br>4、position布局
  <br>5、table布局</p>
<p>六、0.5边框问题</p>
<p>1、缩放
  <br> .border {
  <br> position: relative;
  <br> }</p>
<pre><code>.border:after {
    content: &quot; &quot;;
    display: block;
    position: absolute;
    box-sizing: border-box;
    left: 0px;
    top:0px;
    height: 200%;
    width: 200%;
    transform-origin: 0 0;
    border: 1px solid red;
    transform: scale(.5);
}
</code></pre>
<p>2、图片</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML常见问题]]></title>
      <url>/2017/11/03/HTML%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>一、行内元素和块级元素的实质上去别</p>
<p>1、行内元素会在一条直线上排列，都是同一行的，水平方向排列
  <br> 块级元素各占据一行，垂直方向排列。块级元素从新行开始结束接着一个断行。
  <br>2、块级元素可以包含行内元素和块级元素。行内元素只能容纳文本或者其他行内元素，除ins和del外，不能包含块状元素。
  <br>3、行内元素设置width无效宽度只与内容有关，height无效(可以设置line-height)，margin上下无效，padding上下无效</p>
<p>特别：
  <br>1、有几个特殊块级元素只能包含内联元素，不能包含块级元素。这几个特殊标签是 h1~h6、p、dt
  <br>2、块级元素与块级元素并列、内联元素与内联元素并列
  <br>3、行内替换元素！img、input、textarea、select、object都是替换元素。这些元素往往没有实际的内容，即是一个空元素</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS面试那些事 -- Part Two 基础篇]]></title>
      <url>/2017/11/02/JS2/</url>
      <content type="html"><![CDATA[<p>来来来 看过来。。。。继续挖坑。。。。</p>
<p>16、事件监听</p>
<p>直接上干货</p>
<pre><code>&lt;body&gt;
    &lt;div id=&quot;clickme&quot;&gt;点我&lt;/div&gt;
    &lt;div id=&quot;kk&quot; onclick=&quot;handler()&quot;&gt;注册时间&lt;/div&gt;
&lt;/body&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function handler(){
                alert(&apos;aaaa&apos;)
            }

        window.onload = function(){
            var btn = document.getElementById(&apos;clickme&apos;);
            btn.addEventListener(&apos;click&apos;,function(){
                alert(&quot;dddd&quot;)
            },false)

            btn.addEventListener(&apos;click&apos;,function(){
                alert(&quot;cccc&quot;)
            },false)
            //错误写法，传入的function其实并不是同一个function
            btn.removeEventListener(&apos;click&apos;,function(){
                alert(&apos;nnnn&apos;)
            })
            //改写
            function AAA(){
                alert(&apos;lllll&apos;)
            }
            btn.addEventListener(&apos;click&apos;,AAA,false);
            btn.removeEventListener(&apos;click&apos;,AAA,false)
        }
&lt;/script&gt;
</code></pre>
<p>17、最常见的邮箱正则是什么？</p>
<pre><code>function isAvailableEmail(sEmail) {
    var reg = /^(\w)+(\.\w+)*@(\w)+((\.\w+))+$/;
    return reg.test(sEmail);
}

18、实现字符串驼峰

function cssStyle2DomStyle(sName) {
    return sName.replace(/(?!^)\-(\w)(\w+)/g, function(a, b, c){
            return b.toUpperCase() + c.toLowerCase();
        }).replace(/^\-/, &apos;&apos;);
}
</code></pre>
<p>19、检查字符串重复数字</p>
<pre><code>function containsRepeatingLetter(str) {
     return /([a-zA-Z])\1/.test(str);
}
</code></pre>
<p>当然还有很多很多题目。。。BUT 有些是作为大前端必备的基础
  <br>SO 本宝宝会单独列出专题
  <br>FOR EXAMPLE 像是继承啦。。。一些基础算法啦。。对象啦等等一系列必备技能
  <br>想看的宝宝 阔以去看看专题呦😘😘😘😘😘😘😘😘😘😘😘😘😘😘😘😘😘</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS面试那些事 -- Part One 基础篇]]></title>
      <url>/2017/11/02/JS1/</url>
      <content type="html"><![CDATA[<p>啦啦啦啦啦啦。。。。。这可是本仙女呕心沥血总结出的，关于JS面试会问到的一些面试题。。。。。
  <br>都是血和泪啊 😢😢😢😢😢😢😢😢😢😢😢😢😢
  <br>小伙伴们别在踩坑了 😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭</p>
<p>本章先说一说比较常见的、基础问题问题 🐩</p>
<p>1、什么是事件机制？</p>
<p>先说说什么是事件流。
  <br>事件流：指从页面中接收事件的顺序，有冒泡流和捕获流。</p>
<p>冒泡和捕获
  <br>我们点击一个div, 实际上是先点击document，然后点击事件传递到div,而且并不会在这个div就停下，
  <br>div有子元素就还会向下传递，最后又会冒泡传递回document
  <br>为了兼容更多的浏览器，非特殊情况一般我们都是把事件添加到在事件冒泡阶段。</p>
<p>因为冒泡机制，比如既然点击子元素，也会触发父元素的点击事件，
  <br>那我们完全可以将子元素的事件要做的事写到父元素的事件里，
  <br>也就是将子元素的事件处理程序写到父元素的事件处理程序中，这就是事件委托；
  <br>利用事件委托，只指定一个事件处理程序，就可以管理某一个类型的所有事件</p>
<p>2、伪数组转数组 </p>
<p>方法一、 声明一个空数组，通过遍历伪数组把它们重新添加到新的数组中，大家都会，这不是面试官要的
  <br>var aLi = document.querySelectorAll(‘li’);
  <br> var arr = [];
  <br> for (var i = 0; i &lt; aLi.length; i++) {
  <br> arr[arr.length] = aLi[i]
  <br> }</p>
<p>方法二、使用数组的slice()方法 它返回的是数组，使用call或者apply指向伪数组
  <br>var arr = Array.prototype.slice.call(aLi);</p>
<p>方法3、 ES6中数组的新方法 from()
  <br>// ES5的写法
  <br>var arr1 = [].slice.call(arrayLike)
  <br>// ES6的写法
  <br>let arr2 = Array.from(arrayLike)</p>
<p>3、基本数据类型和引用数据类型区别</p>
<p>基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象
  <br>Number、String 、Boolean、Null和Undefined。基本数据类型是按值访问的，
  <br>因为可以直接操作保存在变量中的实际值。示例：
  <br>var a = 10;
  <br>var b = a;
  <br>b = 20;</p>
<p>console.log(a); // 10值
  <br>上面，b获取的是a值得一份拷贝，虽然，两个变量的值相等，但是两个变量保存了两个不同的基本数据类型值
  <br>b只是保存了a复制的一个副本。所以，b的改变，对a没有影响。</p>
<p>引用类型数据：对象类型Object type();Object 、Array 、Function 、Data
  <br>javascript的引用数据类型是保存在堆内存中的对象。
  <br>与其他语言的不同是，你不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。
  <br>var obj1 = new Object();
  <br>var obj2 = obj1;
  <br>obj2.name = “我有名字了”;
  <br>console.log(obj1.name); // 我有名字了
  <br>说明这两个引用数据类型指向了同一个堆内存对象。obj1赋值给onj2，实际上这个堆内存对象在栈内存的引用地址复制了一份给了obj2，
  <br>但是实际上他们共同指向了同一个堆内存对象。实际上改变的是堆内存对象。</p>
<p>Es5的基本数据类型：undefined，null,Object,function,Number,string
  <br>es6新增的一个数据类型：Symbol</p>
<p>4、实现回文字符串</p>
<p>//判断回文
  <br>function isPalindrome(line) {
  <br> line += “”;
  <br> return line === line.split(“”).reverse().join(“”);
  <br>} </p>
<p>这种方法很方便，但效率不高，字符串分割，倒转，聚合都需要很多额外的操作。</p>
<p>function isPalindrome(line) {
  <br> line += “”;
  <br> for(var i=0,j=line.length-1;i&lt;j;i++,j–){
  <br> if(line.charAt(i) !== line.charAt(j)){
  <br> return false;
  <br> }
  <br> }
  <br> return true;
  <br> }</p>
<p>5、call，apply，bind之间的区别有哪些？</p>
<p>在说区别之前还是先总结一下三者的相似之处：
  <br>① 都是用来改变函数的this对象的指向的。
  <br>② 第一个参数都是this要指向的对象。
  <br>③ 都可以利用后续参数传参。</p>
<p>区别:
  <br>① bind不会立即调用，其他两个会立即调用
  <br>② apply和call都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）；
  <br>③ bind（)也是改变函数体内this的指向;</p>
<p>6、js的节流和去抖</p>
<p>节流：多次反复调用提议行为时 利用settimeout ，在一定时间内 不允许重复执行</p>
<p>消抖：多次反复调用提议行为时 利用settimeout，若在一时间内再次出发相同行为，则将之前行为的定时器去掉</p>
<p>7、settimeout和setInterval</p>
<p>javascript都是以单线程的方式运行于浏览器的javascript引擎中的,
  <br>setTimeout和setInterval的作用只是把你要执行的代码在你设定的一个
  <br>时间点插入js引擎维护的一个代码队列中, 插入代码队列并不意味着你的代码就会立马执行的</p>
<p>① setTimeout
  <br>function click() {
  <br>// code block1…
  <br>setTimeout(function() {
  <br>// process …
  <br>}, 200);
  <br>// code block2
  <br>}
  <br> 假设我们给一个button的onclick事件绑定了此方法, 当我们按下按钮后,
  <br>肯定先执行block1的内容, 然后运行到setTimeout的地方, setTimeout会告诉浏览器说,
  <br>“200ms后我会插一段要执行的代码给你的队列中”, 浏览器当然答应了(注意插入代码并不意味着立马执行),
  <br>setTimeout代码运行后, 紧跟其后的block2代码开始执行, 这里就开始说明问题了,
  <br>如果block2的代码执行时间超过200ms, 那结果会是如何? 或许按照你之前的理解,
  <br>会理所当然的认为200ms一到, 你的process代码会立马执行…事实是, 在block2执行过程中(执行了200ms后)process代码被插入代码队列,
  但一直要等click方法执行结束, 才会执行process代码段, 从代码队列上看process代码是在click后面的, 再加上js以单线程方式执行, 所以应该不难理解.
  如果是另一种情况, block2代码执行的时间&lt;200ms, setTimeout在200ms后将process代码插入到代码队列, 而那时执行线程可能已经处于空闲状态了(idle),
  那结果就是200ms后, process代码插入队列就立马执行了, 就让你感觉200ms后, 就执行了.</p>
<p>② setInterval
  <br>时间间隔或许会跳过
  <br>时间间隔可能&lt;定时调用的代码的执行时间
  <br>function click() {
  <br>// code block1…
  <br>setInterval(function() {
  <br>// process …
  <br>}, 200);
  <br>// code block2
  <br>}
  <br> 比如onclick要300ms执行完, block1代码执行完, 在5ms时执行setInterval, 以此为一个时间点,
  <br>在205ms时插入process代码, click代码顺利结束, process代码开始执行(相当于图中的timer code),
  <br>然而process代码也执行了一个比较长的时间, 超过了接下来一个插入时间点405ms,
  <br>这样代码队列后又插入了一份process代码, process继续执行着, 而且超过了605ms这个插入时间点,
  <br>下面问题来, 可能你还会认为代码队列后面又会继续插入一份process代码…真实的情况是,
  <br>由于代码队列中已经有了一份未执行的process代码, 所以605ms这个插入时间点将会被”无情”的跳过,
  <br>因为js引擎只允许有一份未执行的process代码, 说到这里不知道您是不是会豁然开朗呢…</p>
<p>8、解析url中的参数</p>
<p>function getUrlParam(sUrl,sKey){
  <br> var result = {};
  <br> sUrl.replace(/\??(\w+)=(\w+)&amp;?/g,function(a,k,v){
  <br> if(result[k] !== void 0){
  <br> var t = result[k];
  <br> result[k] = [].concat(t,v);
  <br> }else{
  <br> result[k] = v;
  <br> }
  <br> });
  <br> if(sKey === void 0){
  <br> return result;
  <br> }else{
  <br> return result[sKey] || ‘’;
  <br> }
  <br>}</p>
<p>9、JS的组成部分有那些</p>
<p>JavaScript的三大组成部分是:
  <br>① ECMAScript：JavaScript的核心，描述了语言的基本语法(var、for、if、array等)和
  <br> 数据类型(数字、字符串、布尔、函数、对象(obj、[]、{}、null)、未定义)，
  <br> ECMAScript是一套标准，定义了一种语言（比如JS）是什么样子
  <br>② 文档对象模型（DOM）：DOM（文档对象模型）是 HTML 和 XML 的应用程序接口（API），DOM 将把
  <br> 整个页面规划成由节点层级构成的文档
  <br>③ 浏览器对象模型（BOM）：对浏览器窗口进行访问和操作。
  <br> 弹出新的浏览器窗口，移动、改变和关闭浏览器窗口，
  <br> 提供详细的网络浏览器信息（navigator object），详细的页面信
  <br> 息（location object），详细的用户屏幕分辨率的信息（screen object），
  <br> 对cookies的支持等等</p>
<p>10、函数声明方式</p>
<p>//函数声明
  <br>function x(){}</p>
<p>//函数表达式）：
  <br>var a = function(){}</p>
<p>//构造函数发
  <br>var x = new Function();</p>
<p>函数声明在代码执行以前被加载到作用域中，
  <br>函数表达式则是在代码执行到那一行的时候才会有定义</p>
<p>11、Date类型</p>
<p>Date.parse(‘1900-01-19’);</p>
<p>// -2207433600000\
  <br>//
  <br>// 创建一个日期对象, var now = new Date(), 新对象自动获得当前时间和对象。</p>
<p>如果想根据指定日期和时间的话，就必须传入该日期的毫秒数(从UTC时间1970年1月1日起)。
  <br>Date.parse(‘May 25, 2004’), 转成毫秒数。 (UTC时间)
  <br>Date.UTC(2005, 4, 5, 17, 55, 55), 转成毫秒数。2005-05-05-17-55-55。(GMT时间)
  <br>new Date()会模仿上面2种方法，也就是说可以直接向Date()构造函数传入上面两种参数的一种。
  <br>但是有一点儿区别，new Date()模仿的时候，都是根据UTC(世界协调时间)时间创建的，而非GMT(格林尼治标准时间)创建。</p>
<p>12、常见状态码的含义</p>
<p>2开头 （请求成功）表示成功处理了请求的状态代码。
  <br>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。
  <br>201 （已创建） 请求成功并且服务器创建了新的资源。
  <br>202 （已接受） 服务器已接受请求，但尚未处理。
  <br>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。
  <br>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。
  <br>205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。
  <br>206 （部分内容） 服务器成功处理了部分 GET 请求。</p>
<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。
  <br>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。
  <br>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。
  <br>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。
  <br>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。
  <br>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。
  <br>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。
  <br>307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。
  <br>400 （错误请求） 服务器不理解请求的语法。
  <br>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。
  <br>403 （禁止） 服务器拒绝请求。
  <br>404 （未找到） 服务器找不到请求的网页。
  <br>405 （方法禁用） 禁用请求中指定的方法。
  <br>406 （不接受） 无法使用请求的内容特性响应请求的网页。
  <br>407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。
  <br>408 （请求超时） 服务器等候请求时发生超时。
  <br>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。
  <br>410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。
  <br>411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。
  <br>412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。
  <br>413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。
  <br>414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。
  <br>415 （不支持的媒体类型） 请求的格式不受请求页面的支持。
  <br>416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。
  <br>417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</p>
<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。
  <br>500 （服务器内部错误） 服务器遇到错误，无法完成请求。
  <br>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
  <br>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。
  <br>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。
  <br>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。
  <br>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</p>
<p>13、http和https</p>
<p>① HTTPS是以安全为目标的HTTP通道，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL
  <br>② https具有安全性的ssl加密传输协议需要到ca申请证书，http是超文本传输协议，明文传输
  <br>③ http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443</p>
<p>SSL的位置介于应用层和TCP层之间，应用层数据不再直接传递给传输层，而是传递给SSL层，SSL层对从应用层收到的数据进行加密，并增加自己的SSL头
  <br>TLS/SSL中使用了非对称加密，对称加密以及HASH算法</p>
<p>14、常见的DOM操作</p>
<p>

  <body>
    <br>
    <div id="container">
      <br>
      <p id="child1">djsklajldks</p>
      <br>
      <div id="child2">
        <a href="">llllllll</a>
      </div>
      <br> </div>
</body></p>
<p>
  
</p>
<script type="text/javascript">
  //创建节点
  var container = document.getElementById("container")
  var para = document.createElement("p")
  var text = document.createTextNode("只是创建的节点")
  var c2 = document.getElementById('child2')
  para.appendChild(text);
  container.appendChild(para)
  //删除
  container.removeChild(document.getElementById('child1'))
  //替换
  container.replaceChild(para, c2)
  //插入
  // container.insertBefore(para,c2)
  //克隆
  var x = container.cloneNode()
  console.log(x)

</script>

<p>15、闭包问题</p>
<p>简单来说，就是能访问一个函数内部的函数</p>
<p>上张图片 👇👇👇👇👇</p>
<p>
  <img src="/MyImages/12.jpeg" alt="这里是图片">
</p>
<p>举个🌰
  <br>function makeClosures(arr, fn) {
  <br> var result = [];
  <br> arr.forEach(function(e){
  <br> result.push(function(){
  <br> return fn(e)
  <br> })
  <br> })
  <br> return result
  <br>}</p>
<p>再举个🌰</p>
<p>function a() {
  <br> var arg = [];
  <br> for(var i = 0;i &lt; 10;i++) {
  <br> arg[i] = function() {
  <br> return i;
  <br> };
  <br> }
  <br> return arg;
  <br>}</p>
<p>a()
  <a href="">1</a>; // 10</p>
<p>啦啦啦啦啦 最近有工作要忙 先到这
  <br>BUT 后面还有大批大批的僵尸会袭来呦😨😨😨😨😨😨😨😨😨😨😨😨😨😨😨😨😨</p>
<p>想继续的宝宝 戳一戳 去下一弹👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p>
<p>
  <a href="http://icey-monopolize.com/2017/11/02/JS2/">http://icey-monopolize.com/2017/11/02/JS2/</a>
</p>
<p>🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆</p>
<p>觉得小仙女叨叨的还不错的宝宝 可以戳下边打赏哦！☟☟☟☟☟☟☟☟☟☟☟</p>
<p>么么哒😘</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6所有特点应用 -- 第三弹]]></title>
      <url>/2017/11/02/ES6%E7%AC%AC3%E5%BC%B9/</url>
      <content type="html"><![CDATA[<p>OK，CONTINUE…</p>
<p>二十一、尾调用</p>
<p>尾调用的概念非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>
<p>function factorial(n, acc = 1) {
  <br> if (n &lt;= 1) return acc;
  <br> return factorial(n - 1, n * acc);
  <br>}
  <br>console.log(factorial(10))
  <br>console.log(factorial(100))
  <br>console.log(factorial(1000))
  <br>console.log(factorial(10000))
  <br>console.log(factorial(100000))
  <br>console.log(factorial(1000000))</p>
<p>factorial(10) -&gt; 3628800
  <br>factorial(100) -&gt; 9.332621544394418e+157
  <br>factorial(1000) -&gt; Infinity
  <br>factorial(10000) -&gt; Infinity
  <br>factorial(100000) -&gt; RangeError: Maximum call stack size exceeded
  <br>factorial(1000000) -&gt; RangeError: Maximum call stack size exceeded</p>
<p>二十二、扩展 ➕ 对象字面量</p>
<p>let {x,y,…z} = {x:1,y:2,a:3,b:4}
  <br>console.log(x);//1
  <br>console.log(y);//2
  <br>console.log(z);//{ a: 3, b: 4 }</p>
<p>let n = {x,y,…z};
  <br>console.log(n)//{ x: 1, y: 2, a: 3, b: 4 }
  <br>console.log(obj）</p>
<p>二十三、故障弱化解构</p>
<p>var [a] = []
  <br>var [b = 1] = []
  <br>var c = []
  <br>console.log(a)
  <br>console.log(b)
  <br>console.log(c)</p>
<p>a -&gt; undefined
  <br>b -&gt; 1
  <br>c -&gt; []</p>
<p>function f(x,y=12){
  <br> return x + y
  <br>}</p>
<p>console.log(f(3))
  <br>console.log(f(3,2))</p>
<p>f(3) -&gt; 15
  <br>f(3,2) -&gt; 5</p>
<p>function f(x,y,z){
  <br> return x + y + z;
  <br>}
  <br>// 传递数组的每个元素作为参数
  <br>console.log(f(…[1,2,3]))
  <br>f(…[1,2,3]) -&gt; 6</p>
<p>function f([x,y,z]){
  <br> return x + y + z;
  <br>}
  <br>// 传递数组的每个元素作为参数
  <br>console.log(f([1,2,3]))
  <br>f([1,2,3]) -&gt; 6</p>
<p>var parts = [“shoulders”,”knees”];
  <br>var lyric = [“head”,…parts,”and”,”toes”];</p>
<p>console.log(lyric)
  <br>lyrics -&gt; [“head”,”shoulders”,”knees”,”and”,”toes”]</p>
<p>二十四、代理</p>
<p>代理可以用来改变对象的行为。 它们允许我们定义 trap
  <br>var obj = function ProfanityGenerator(){
  <br> return {
  <br> word:”111111112222”
  <br> }
  <br>}()</p>
<p>var handler = function CensoringHandler(){
  <br> return {
  <br> get:function(target,key){
  <br> return target[key].replace(“11111111”,”3333”)
  <br> }
  <br> }
  <br>}()</p>
<p>var proxy = new Proxy(obj, handler);
  <br>console.log(proxy.words);</p>
<p>proxy.words -&gt; 33332222</p>
<p>var handler =
  <br>{
  <br> get:…,
  <br> set:…,
  <br> has:…,
  <br> deleteProperty:…,
  <br> apply:…,
  <br> construct:…,
  <br> getOwnPropertyDescriptor:…,
  <br> defineProperty:…,
  <br> getPrototypeOf:…,
  <br> setPrototypeOf:…,
  <br> enumerate:…,
  <br> ownKeys:…,
  <br> preventExtensions:…,
  <br> isExtensible:…
  <br>}</p>
<p>二十五、反射</p>
<p>新类型的元编程与新的API现有的还有一些新的方法。
  <br>var z = {w: “Super Hello”}
  <br>var y = {x: “hello”,
  <strong>proto</strong>: z};</p>
<p>console.log(Reflect.getOwnPropertyDescriptor(y, “x”));
  <br>console.log(Reflect.has(y, “w”));
  <br>console.log(Reflect.ownKeys(y, “w”));</p>
<p>console.log(Reflect.has(y, “x”));
  <br>console.log(Reflect.deleteProperty(y,”x”))
  <br>console.log(Reflect.has(y, “x”));</p>
<p>Reflect.getOwnPropertyDescriptor(y, “x”) -&gt; {“value”:”hello”,”writable”:true,”enumerable”:true,”configurable”:true}
  <br>Reflect.has(y, “w”) -&gt; true
  <br>Reflect.ownKeys(y, “w”) -&gt; [“x”]
  <br>Reflect.has(y, “x”) -&gt; true
  <br>Reflect.deleteProperty(y,”x”) -&gt; true
  <br>Reflect.has(y, “x”) -&gt; false</p>
<p>二十六、可继承内置函数</p>
<p>我们现在可以继承原生类。</p>
<p>class CustomArray extends Array{
  <br>}
  <br>var a = new CustomArray();
  <br>a[0] = 2
  <br>console.log(a[0])</p>
<p>a[0] -&gt; 2
  <br>//不能使用数组的代理(Proxy)来覆盖getter函数。</p>
<p>二十七、新类库</p>
<p>console.log(Number.EPSILON)
  <br>console.log(Number.isInteger(Infinity))
  <br>console.log(Number.isNaN(“NaN”))</p>
<p>console.log(Math.acosh(3))
  <br>console.log(Math.hypot(3, 4))
  <br>console.log(Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2))</p>
<p>console.log(“abcde”.includes(“cd”) )
  <br>console.log(“abc”.repeat(3) )</p>
<p>console.log(Array.of(1, 2, 3) )
  <br>console.log([0, 0, 0].fill(7, 1) )
  <br>console.log([1, 2, 3].find(x =&gt; x == 3) )
  <br>console.log([1, 2, 3].findIndex(x =&gt; x == 2))
  <br>console.log([1, 2, 3, 4, 5].copyWithin(3, 0))
  <br>console.log([“a”, “b”, “c”].entries() )
  <br>console.log([“a”, “b”, “c”].keys() )
  <br>console.log([“a”, “b”, “c”].values() )</p>
<p>console.log(Object.assign({}, { origin: new Point(0,0) }))</p>
<p>Number.EPSILON -&gt; 2.220446049250313e-16
  <br>Number.isInteger(Infinity) -&gt; false
  <br>Number.isNaN(“NaN”) -&gt; false
  <br>Math.acosh(3) -&gt; 1.7627471740390859
  <br>Math.hypot(3, 4) -&gt; 5
  <br>Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) -&gt; 2
  <br>“abcde”.includes(“cd”) -&gt; true
  <br>“abc”.repeat(3) -&gt; abcabcabc
  <br>Array.of(1, 2, 3) -&gt; [1,2,3]
  <br>[0, 0, 0].fill(7, 1) -&gt; [0,7,7]
  <br>[1, 2, 3].find(x =&gt; x == 3) -&gt; 3
  <br>[1, 2, 3].findIndex(x =&gt; x == 2) -&gt; 1
  <br>[1, 2, 3, 4, 5].copyWithin(3, 0) -&gt; [1,2,3,1,2]
  <br>[“a”, “b”, “c”].entries() -&gt; {}
  <br>[“a”, “b”, “c”].keys() -&gt; {}
  <br>[“a”, “b”, “c”].values() -&gt; TypeError: [“a”,”b”,”c”].values is not a function
  <br>Object.assign({}, { origin: new Point(0,0) }) -&gt; ReferenceError: Point is not
  define</p>
<p>二十八、Reflect</p>
<p>Reflect对象的设计目的有这样几个。
  <br>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上
  <br>修改某些Object方法的返回结果，让其变得更合理
  <br>让Object操作都变成函数行为。
  <br>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法</p>
<p>Reflect对象一共有13个静态方法。</p>
<p>Reflect.apply(target,thisArg,args)
  <br>Reflect.construct(target,args)
  <br>Reflect.get(target,name,receiver)
  <br>Reflect.set(target,name,value,receiver)
  <br>Reflect.defineProperty(target,name,desc)
  <br>Reflect.deleteProperty(target,name)
  <br>Reflect.has(target,name)
  <br>Reflect.ownKeys(target)
  <br>Reflect.isExtensible(target)
  <br>Reflect.preventExtensions(target)
  <br>Reflect.getOwnPropertyDescriptor(target, name)
  <br>Reflect.getPrototypeOf(target)
  <br>Reflect.setPrototypeOf(target, prototype)
  <br>上面这些方法的作用，大部分与Object对象的同名方法的作用都是相同的，而且它与Proxy对象的方法是一一对应的</p>
<p>Reflect.get(target, name, receiver)
  <br>Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。
  <br>var myObject = {
  <br> foo: 1,
  <br> bar: 2,
  <br> get baz() {
  <br> return this.foo + this.bar;
  <br> },
  <br>}</p>
<p>Reflect.get(myObject, ‘foo’) // 1
  <br>Reflect.get(myObject, ‘bar’) // 2
  <br>Reflect.get(myObject, ‘baz’) // 3</p>
<p>如果name属性部署了读取函数（getter），则读取函数的this绑定receiver。
  <br>var myObject = {
  <br> foo: 1,
  <br> bar: 2,
  <br> get baz() {
  <br> return this.foo + this.bar;
  <br> },
  <br>};</p>
<p>var myReceiverObject = {
  <br> foo: 4,
  <br> bar: 4,
  <br>};</p>
<p>Reflect.get(myObject, ‘baz’, myReceiverObject) // 8
  <br>如果第一个参数不是对象，Reflect.get方法会报错
  <br>Reflect.get(1, ‘foo’) // 报错
  <br>Reflect.get(false, ‘foo’) // 报错</p>
<p>Reflect.set(target, name, value, receiver)
  <br>Reflect.set方法设置target对象的name属性等于value。
  <br>var myObject = {
  <br> foo: 1,
  <br> set bar(value) {
  <br> return this.foo = value;
  <br> },
  <br>}</p>
<p>myObject.foo // 1</p>
<p>Reflect.set(myObject, ‘foo’, 2);
  <br>myObject.foo // 2</p>
<p>Reflect.set(myObject, ‘bar’, 3)
  <br>myObject.foo // 3</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6所有特点应用 -- 第二弹]]></title>
      <url>/2017/11/02/ES6%E7%AC%AC%E4%BA%8C%E5%BC%B9/</url>
      <content type="html"><![CDATA[<p>吼吼，来吧，小宝贝，废话不多说，咱们书接上回。。。。</p>
<p>十一、Prosmises</p>
<p>异步编程
  <br>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件
  <br>从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p>
<p>Promise对象有以下两个特点:
  <br>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和
  <br> rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态
  <br>（2）Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。
  <br> 只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）</p>
<p>var promise = new Promise(function(resolve, reject) {
  <br> // … some code</p>
<p> if (/
  <em> 异步操作成功 </em>/){
  <br> resolve(value);
  <br> resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved）
  <br> } else {
  <br> reject(error);
  <br> reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected
  <br> }
  <br>});</p>
<p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。
  <br>promise.then(function(value) {
  <br> // success
  <br>}, function(error) {
  <br> // failure
  <br>});
  <br>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用
  <br>第二个回调函数是Promise对象的状态变为rejected时调用。</p>
<p>来个 🌰 吼吼 👇</p>
<p>var p1 = new Promise((resolve,reject)=&gt;{
  <br> setTimeout(()=&gt;resolve(“1”),101)
  <br>})
  <br>var p2 = new Promise((resolve, reject) =&gt; {
  <br> setTimeout(() =&gt; resolve(“2”), 100)
  <br>})
  <br>Promise.race([p1, p2]).then((res) =&gt; {
  <br> console.log(res)
  <br>})
  <br>Promise.all([p1, p2]).then((res) =&gt; {
  <br> console.log(res)
  <br>})</p>
<p>res -&gt; 2
  <br>res -&gt; [“1”,”2”]</p>
<p>var p1 = Promise.resolve(“1”)
  <br>var p2 = Promise.reject(“2”)
  <br>Promise.race([p1, p2]).then((res) =&gt; {
  <br> console.log(res)
  <br>})
  <br>※※※※ ➡️ 如果一个 promise 失败，all和race也将 reject(拒绝)。</p>
<p>让我们举个 🌰 ，come on 👇</p>
<p>var p1 = new Promise((resolve, reject) =&gt; {
  <br> setTimeout(() =&gt; resolve(“1”), 1001)
  <br>})
  <br>var p2 = new Promise((resolve, reject) =&gt; {
  <br> setTimeout(() =&gt; reject(“2”), 1)
  <br>})</p>
<p>Promise.race([p1, p2]).then((res) =&gt; {
  <br> console.log(“success” + res)
  <br>}, res =&gt; {
  <br> console.log(“error “ + res)
  <br>})</p>
<p>Promise.all([p1, p2]).then((res) =&gt; {
  <br> console.log(“success” + res)
  <br>}, res =&gt; {
  <br> console.log(“error “ + res)
  <br>})</p>
<p>“error “ + res -&gt; error 2
  <br>“error “ + res -&gt; error 2</p>
<p>Promise也有一些缺点。首先，无法取消Promise，
  <br>Promise 新建后就会立即执行</p>
<p>######################################################</p>
<p>十二、Symbol</p>
<p>话不多说，直接上干货</p>
<p>var typeSymbol = Symbol(“type”);
  <br>var typeSymbol = Symbol(“type”);</p>
<p>class Pet{
  <br> constructor(type){
  <br> this[typeSymbol] = type
  <br> }
  <br> getType(){
  <br> return this[typeSymbol]
  <br> }
  <br>}
  <br>var a = new Pet(“dog”);
  <br>console.log(a.getType());
  <br>console.log(Object.getOwnPropertyNames(a))</p>
<p>console.log(Symbol(“a”) === Symbol(“a”))</p>
<p>a.getType() -&gt; dog
  <br>Object.getOwnPropertyNames(a) -&gt; []
  <br>Symbol(“a”) === Symbol(“a”) -&gt; false</p>
<p>######################################################</p>
<p>十三、Unicode</p>
<p>var regex = new RegExp(‘\u{61}’,’u’)</p>
<p>console.log(regex.unicode)
  <br>console.log(“\uD842\uDFD7”)
  <br>console.log(“\uD842\uDFD7”.codePointAt())</p>
<p>######################################################</p>
<p>十四、箭头函数</p>
<p>var evens = [2, 4, 6, 8, 10, 12, 14];
  <br>var odds = evens.map(v =&gt; v + 1)
  <br>var nums = events.map((v,i) =&gt; v + i)
  <br>var pairs = events.map(v =&gt; ({even: v,odd:v + 1}))</p>
<p>0:{even: 2, odd: 3}
  <br>1:{even: 4, odd: 5}
  <br>2:{even: 6, odd: 7}
  <br>3:{even: 8, odd: 9}
  <br>4:{even: 10, odd: 11}
  <br>5:{even: 12, odd: 13}
  <br>6:{even: 14, odd: 15}</p>
<p>nums.forEach(v =&gt; {
  <br> if(v%5 === 0)
  <br> fives.push(v)
  <br>})</p>
<p>啰嗦一句，请注意箭头函数中的this！！！！！！！！神坑啊</p>
<p>嵌套的箭头函数怎么办，箭头函数内部，还可以再使用箭头函数
  <br>let insertn = (v) = &gt; ({intro:(arr)=&gt;({obj:(o)=&gt;
  <br> {
  <br> arr.splice(array.indexOf(o)+1,0,v);
  <br> return arr;
  <br> }
  <br>})})</p>
<p>//部署管道机制，即前一个函数的输出是后一个函数的输入。
  <br>const pip = (…fn) =&gt; val =&gt;fn.reduce((a,b)=&gt;b(a),val);</p>
<p>const p1 = a =&gt;a+1
  <br>const p2 = a =&gt;a*2
  <br>const add = pip(p1,p2)
  <br>add(5);</p>
<p>######################################################</p>
<p>十五、解构</p>
<p>var [a,,b] = [1,2,3];
  <br>console.log(a);
  <br>console.log(b);</p>
<p>a -&gt; 1
  <br>b -&gt; 3</p>
<p>nodes = () =&gt;{ return {op:’a’,lhs:’b’,rhs:’c’} }
  <br>var { op:a,lhs:b,rhs:c } = nodes()
  <br>conosle.log(a);
  <br>console.log(b);
  <br>console.log(c);</p>
<p>a -&gt; a
  <br>b -&gt; b
  <br>c -&gt; c</p>
<p>nodes = () =&gt; { return {lhs: “a”, op: “b”, rhs: “c”}}</p>
<p>// binds
  <code>op</code>,
  <code>lhs</code> and
  <code>rhs</code> in scope
  <br>var {op, lhs, rhs} = nodes()
  <br>console.log(op)
  <br>console.log(lhs)
  <br>console.log(rhs)</p>
<p>op -&gt; b
  <br>lhs -&gt; a
  <br>rhs -&gt; c</p>
<p>unction g({name:x}){
  <br> return x;
  <br>}</p>
<p>function m({name}){
  <br> return name
  <br>}
  <br>console.log(g({name:5}))
  <br>console.log(m({name:5}))</p>
<p>g({name: 5}) -&gt; 5
  <br>m({name: 5}) -&gt; 5</p>
<p>######################################################</p>
<p>十六、模块和模块加载器</p>
<p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。
  <br>eg: import { stat, exists, readFile } from ‘fs’;
  <br>上面代码的实质是从fs模块加载3个方法，其他方法不加载</p>
<p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。
  <br>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。
  <br>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。</p>
<p>重要的事情说三遍！！！！！！</p>
<p>严格模式主要有以下限制:
  <br>1、变量必须声明后再使用
  <br>2、函数的参数不能有同名属性，否则报错
  <br>3、不能使用with语句
  <br>4、不能对只读属性赋值，否则报错
  <br>5、不能使用前缀0表示八进制数，否则报错
  <br>6、不能删除不可删除的属性，否则报错
  <br>7、不能删除变量delete prop，会报错，只能删除属性delete global[prop]
  <br>8、eval不会在它的外层作用域引入变量
  <br>9、eval和arguments不能被重新赋值
  <br>10、arguments不会自动反映函数参数的变化
  <br>11、不能使用arguments.callee
  <br>12、不能使用arguments.caller
  <br>13、禁止this指向全局对象
  <br>14、不能使用fn.caller和fn.arguments获取函数调用的堆栈
  <br>15、增加了保留字（比如protected、static和interface）</p>
<p>上个 🌰
  <br>import {firstName, lastName, year} from ‘./profile’;
  <br>//import后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略</p>
<p>function setName(element) {
  <br> element.textContent = firstName + ‘ ‘ + lastName;
  <br>}
  <br>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。
  <br>import { lastName as surname } from ‘./profile’;</p>
<p>警报警报 一大波 僵尸袭来
  <del>~</del>~</p>
<p>import defaultMember from “module-name”;
  <br>import
  <em> as name from “module-name”;
    <br>import { member } from “module-name”;
    <br>import { member as alias } from “module-name”;
    <br>import { member1 , member2 } from “module-name”;
    <br>import { member1 , member2 as alias2 , […] } from “module-name”;
    <br>import defaultMember, { member [ , […] ] } from “module-name”;
    <br>import defaultMember, </em> as name from “module-name”;
  <br>import “module-name”;</p>
<p>再来说说export这个小妖精
  <br>export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能</p>
<p>export var firstName = ‘Michael’;
  <br>export var lastName = ‘Jackson’;
  <br>export var year = 1958;</p>
<p>// profile.js
  <br>var firstName = ‘Michael’;
  <br>var lastName = ‘Jackson’;
  <br>var year = 1958;</p>
<p>export {firstName, lastName, year};</p>
<p>通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名
  <br>function v1() { … }
  <br>function v2() { … }</p>
<p>export {
  <br> v1 as streamV1,
  <br> v2 as streamV2,
  <br> v2 as streamLatestVersion
  <br>};</p>
<p>重命名后，v2可以用不同的名字输出两次</p>
<p>哇呕
  <del>~</del>~~~有一大波僵尸正在狂奔而来！！！！！</p>
<p>export { name1, name2, …, nameN };
  <br>export { variable1 as name1, variable2 as name2, …, nameN };
  <br>export let name1, name2, …, nameN; // also var
  <br>export let name1 = …, name2 = …, …, nameN; // also var, const</p>
<p>export expression;
  <br>export default expression;
  <br>export default function (…) { … } // also class, function
  <em>
    <br>export default function name1(…) { … } // also class, function</em>
  <br>export { name1 as default, … };</p>
<p>export * from …;
  <br>export { name1, name2, …, nameN } from …;
  <br>export { import1 as name1, import2 as name}</p>
<p>######################################################</p>
<p>十七、生成器</p>
<p>生成器创建迭代器，并且比迭代器更具动态性</p>
<p>先来一堆代码
  <br>var initinity = {</p>
<pre><code>[Symbol.iterator]:function*(){
    var c = 1;
    for(;;){
        yield c++;
    }
}
</code></pre>
<p>}</p>
<p>console.log(“start”)
  <br>for(var n of infinity){
  <br> if(n&gt;10)
  <br> break;
  <br> console.log(n)
  <br>}</p>
<p>“start” -&gt; start
  <br>n -&gt; 1
  <br>n -&gt; 2
  <br>n -&gt; 3
  <br>n -&gt; 4
  <br>n -&gt; 5
  <br>n -&gt; 6
  <br>n -&gt; 7
  <br>n -&gt; 8
  <br>n -&gt; 9
  <br>n -&gt; 10</p>
<p>interface Generator extends Iterator {
  <br> next(value?: any): IteratorResult;
  <br> throw(exception: any);
  <br>}
  <br>function* anotherGenerator(i) {
  <br> yield i + 1;
  <br> yield i + 2;
  <br> yield i + 3;
  <br>}</p>
<p>function
  <em> generator(i) {
    <br> yield i;
    <br> yield</em> anotherGenerator(i);
  <br> yield i + 10;
  <br>}</p>
<p>var gen = generator(10);</p>
<p>console.log(gen.next().value);
  <br>console.log(gen.next().value);
  <br>console.log(gen.next().value);
  <br>console.log(gen.next().value);
  <br>console.log(gen.next().value);</p>
<p>gen.next().value -&gt; 10
  <br>gen.next().value -&gt; 11
  <br>gen.next().value -&gt; 12
  <br>gen.next().value -&gt; 13
  <br>gen.next().value -&gt; 20</p>
<p>function* list(value) {
  <br> for (var item of value) {
  <br> yield item;
  <br> }
  <br>}</p>
<p>for (var value of list([1, 2, 3])) {
  <br> console.log(value);
  <br>}</p>
<p>var iterator = list([1, 2, 3]);</p>
<p>console.log(typeof iterator.next); // function
  <br>console.log(typeof iterator[Symbol.iterator]); // function</p>
<p>console.log(iterator.next().value); // 1</p>
<p>for (var value of iterator) {
  <br> console.log(value); // 2, 3
  <br>}
  <br>table[Symbol.iterator] = function* () {
  <br> var keys = Object.keys(this).sort();</p>
<p> for (var item of keys) {
  <br> yield item;
  <br> }
  <br>}</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，
  <br>Generator 函数除了状态机，还是一个遍历器对象生成函数
  <br>返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征
  <br>一是，function关键字与函数名之间有一个星号；
  <br>二是，函数体内部使用yield表达式，定义不同的内部状态</p>
<p>function* helloWorldGenerator() {
  <br> yield ‘hello’;
  <br> yield ‘world’;
  <br> return ‘ending’;
  <br>}
  <br>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。
  <br>不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，
  <br>而是一个指向内部状态的指针对象</p>
<p>下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态
  <br>也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，
  <br>直到遇到下一个yield表达式（或return语句）为止
  <br>换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，
  <br>而next方法可以恢复执行</p>
<p>hw.next()
  <br>// { value: ‘hello’, done: false }</p>
<p>hw.next()
  <br>// { value: ‘world’, done: false }</p>
<p>hw.next()
  <br>// { value: ‘ending’, done: true }</p>
<p>hw.next()
  <br>// { value: undefined, done: true }</p>
<p>yield 表达式
  <br>由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，
  <br>所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。</p>
<p>######################################################</p>
<p>十八、迭代器</p>
<p>迭代器是一个比数组更动态的类型
  <br>允许我们在语言层面上定义一个（有限或无限的）序列。
  <br>对于for-in循环，它有许多的问题。但是最大的问题，便是它不保证迭代的顺序。
  <br>但是当我们使用ES6迭代器时，这个问题就迎刃而解了。
  <br>let infinite = {
  <br>
  <a href="">Symbol.iterator</a>{
  <br> let c = 0;
  <br> return {
  <br> next(){
  <br> c++;
  <br> return { done:false,value:c }
  <br> }
  <br> }
  <br> }
  <br>}</p>
<p>console.log(“start”)</p>
<p>for(var n of infinite){
  <br> if(n &gt; 10)
  <br> break;
  <br> console.log(n);
  <br>}</p>
<p>“start” -&gt; start
  <br>n -&gt; 1
  <br>n -&gt; 2
  <br>n -&gt; 3
  <br>n -&gt; 4
  <br>n -&gt; 5
  <br>n -&gt; 6
  <br>n -&gt; 7
  <br>n -&gt; 8
  <br>n -&gt; 9
  <br>n -&gt; 10</p>
<p>//使用Typescript，我们可以看到它接口的样子
  <br>interface IteratorResult {
  <br> done:boolean;
  <br> value:any;
  <br>}</p>
<p>interface Iterator{
  <br> next():IteratorResult;
  <br>}</p>
<p>interface Iterable{
  <br>
  <a href="">Symbol.iterator</a>:Iterator
  <br>}</p>
<p>使用for-of，我们得到的是一个可以保证顺序的迭代。
  <br>为了让一个对象可以被迭代器所迭代，对象需要实现一个“迭代协议”，即拥有一个Symbol.iterator属性。
  <br>这个属性会被for-of所使用，在我们的例子中，它就是table[Symbol.iterator]。
  <br>Symbol.iterator只需认为它是对象的一个特殊属性，并且永远不会和其他普通属性产生冲突</p>
<p>table[Symbol.iterator]的值，必须是一个符合“迭代协议”的函数，
  <br>即它需要返回一个类似于{ next: function () {} }的对象。
  <br>table[Symbol.iterator] = function () {
  <br> return {
  <br> next: function () {}
  <br> }
  <br>}
  <br>然后，在for-of循环每次调用next()函数时，
  <br>它需要返回一个类似于{value: …, done: [true/false]}的对象。
  <br>所以，一个迭代器的完整实现类似于如下的例子：</p>
<p>table[Symbol.iterator] = function () {
  <br> var keys = Object.keys(this).sort();
  <br> var index = 0;</p>
<p> return {
  <br> next: function () {
  <br> return {
  <br> value: keys[index], done: index++ &gt;= keys.length
  <br> };
  <br> }
  <br> }
  <br>}
  <br>惰性执行
  <br>迭代器允许我们在第一次调用next()函数之后，再执行相应的逻辑。
  <br>在上面的例子里，当我们调用迭代器的瞬间，我们就立刻执行了排序和取值的工作。
  <br>但是，如果next()函数永远不被调用的话，我们就浪费了性能。所以让我们来优化它：</p>
<p>table[Symbol.iterator] = function () {
  <br> var _this = this;
  <br> var keys = null;
  <br> var index = 0;</p>
<p> return {
  <br> next: function () {
  <br> if (keys === null) {
  <br> keys = Object.keys(_this).sort();
  <br> }</p>
<pre><code>  return {
    value: keys[index], done: index++ &gt;= keys.length
  };
}
</code></pre>
<p> }
  <br>}
  <br>String，Array，TypedArray，Map和Set都是内置迭代器，因为它们的原型中都有一个Symbol.iterator方法</p>
<p>只要永远不返回done: true，就实现了一个无限迭代器。当然，需要极力避免出现这种情况。
  <br>var ids = {
  <br> *[Symbol.iterator]: function () {
  <br> var index = 0;</p>
<pre><code>return {
  next: function () {
    return { value: &apos;id-&apos; + index++, done: false };
  }
};
</code></pre>
<p> }
  <br>};</p>
<p>var counter = 0;</p>
<p>for (var value of ids) {
  <br> console.log(value);</p>
<p> if (counter++ &gt; 1000) { // let’s make sure we get out!
  <br> break;
  <br> }
  <br>}</p>
<p>######################################################</p>
<p>十九、增强对象字面量</p>
<p>var theProtoObj = {
  <br> toString:function(){
  <br> return “the ProtoObject to string”
  <br> }
  <br>}</p>
<p>var handler = () =&gt; “handler”</p>
<p>var obj = {
  <br>
  <em>proto</em>:theProtoObj,
  <br> handler,
  <br> toString(){
  <br> return “d “+super.toString();
  <br> },</p>
<pre><code>[&quot;prop_&quot; + (() =&gt; 42)()]:42
</code></pre>
<p>}
  <br>console.log(obj.handler)
  <br>console.log(obj.handler())
  <br>console.log(obj.toString())
  <br>console.log(obj.prop_42)</p>
<p>######################################################</p>
<p>二十、字符串插值</p>
<p>var name = “Bob”,time = “today”;
  <br>var multiLine = `This</p>
<p>Line</p>
<p>Spans Multiple</p>
<p>Line`</p>
<p>console.log(
  <code>Hello ${name},how are you ${time}?</code>);
  <br>console.log(multiLine)
  <br>
  <code>Hello ${name},how are you ${time}?</code> -&gt; Hello Bob,how are you today?
  <br>multiLine -&gt; This Line Spans Multiple Lines</p>
<p>想继续的宝宝 戳一戳 去下一弹👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p>
<p>
  <a href="http://icey-monopolize.com/2017/11/02/ES6%E7%AC%AC3%E5%BC%B9/">http://icey-monopolize.com/2017/11/02/ES6%E7%AC%AC3%E5%BC%B9/</a>
</p>
<p>🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6所有特点应用 -- 第一弹]]></title>
      <url>/2017/11/01/ES6%E9%87%8D%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>ps：这是本宝宝搜罗N多个人的博客、资料最后的大汇总，如有雷同也是正常现象
  <br>pps：各位大大们请不要在意这些细节喽，宽容点噻。
  <br>ppps：由于本仙女实在是太懒了，so，嘿嘿!就只挑重点记录喽，please 不要喷我。。。</p>
<p>一、Let</p>
<p>{
  <br> var globalVar = “from demo1”
  <br>}
  <br>{
  <br> let globalLet = “from demo2”
  <br>}
  <br>console.log(globalVar)
  <br>console.log(globalLet)</p>
<p>globalVar -&gt; from demo1
  <br>globalLet -&gt; ReferenceError: globalLet is not defined</p>
<p>它不会向window分配任何内容：
  <br>let me = “go”
  <br>var i = “able”</p>
<p>console.log(window.me)
  <br>console.log(window.i)</p>
<p>window.me -&gt; undefined
  <br>window.i -&gt; able</p>
<p>不能使用let重新声明一个变量：
  <br>let me = “foo”;
  <br>let me = “bar”;
  <br>console.log(me);
  <br>SyntaxError: Identifier ‘me’ has already been declared</p>
<p>########################################################</p>
<p>二、Const</p>
<p>一个不能被更改的值
  <br>const a = “b”
  <br>a = “a”
  <br>TypeError: Assignment to constant variable.</p>
<p>应该注意，const 对象仍然可以被改变的。
  <br>const a = { a: “a” }
  <br>a.a = “b”
  <br>console.log(a)
  <br>a -&gt; {“a”:”b”}</p>
<p>########################################################</p>
<p>三、Class类</p>
<p>class ColorPoint extends Point {
  <br>}
  <br>// 等同于
  <br>class ColorPoint extends Point {
  <br> constructor(…args) {
  <br> super(…args);
  <br> }
  <br>}</p>
<p>举个🌰 吧
  <br>class Point {
  <br> constructor(x, y) {
  <br> this.x = x;
  <br> this.y = y;
  <br> }
  <br>}</p>
<p>class ColorPoint extends Point {
  <br> constructor(x, y, color) {
  <br> this.color = color; // ReferenceError</p>
<pre><code>super(x, y);
this.color = color; // 正确
</code></pre>
<p> }
  <br>}
  <br>let cp = new ColorPoint(25, 8, ‘green’);
  <br>//上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例
  <br>cp instanceof ColorPoint // true
  <br>cp instanceof Point // true</p>
<p>再举个🌰
  <br>class A {
  <br> static hello() {
  <br> console.log(‘hello world’);
  <br> }
  <br>}
  <br>class B extends A {
  <br>}
  <br>B.hello() // hello world
  <br>//hello()是A类的静态方法，B继承A，也继承了A的静态方法</p>
<p>还想再来个🌰
  <br>class A {
  <br> constructor() {
  <br> console.log(new.target.name);
  <br> //new.target指向当前正在执行的函数
  <br> }
  <br>}
  <br>class B extends A {
  <br> constructor() {
  <br> super();
  <br> }
  <br>}
  <br>new A() // A
  <br>new B() // B</p>
<p>小可爱们看过来吖，看过来👀</p>
<p>class Student {
  <br> // 构造函数
  <br> // 只能声明一个，否则会报以下错误(Safari 10.0)：
  <br> // SyntaxError: Cannot declare multiple constructors in a single class.
  <br> constructor(name, age) {
  <br> // 类成员变量不用事先声明
  <br> this.name = name;
  <br> this.age = age;</p>
<pre><code>    if (age === undefined) {
        log(&apos;没有传age参数&apos;);
    }
}

// 方法
sayHello(message) {
    // this不能省略
    log(&quot;Hello &quot; + this.name + &quot;: &quot; + message);
}

sayHelloEx(message) {
    log(&quot;Hello &quot; + this.name + &apos;[&apos; + this.age + &apos;]: &apos; + message);
}
</code></pre>
<p>}</p>
<p>class SkinnedMesh extends THREES.Mesh {
  <br> constructor(geometry,materials){
  <br> super(geometry,materials);// 调用父类的constructor
  <br> //子类必须在constructor方法中调用super方法，否则新建实例时会报错
  <br> //这是因为子类没有自己的this对象，而是继承父类的this对象
  <br> this.idMatrix = SkinnedMesh.defaultMatrix();
  <br> this.bones = [];
  <br> this.bonesMatrices = []
  <br> //在子类的构造函数中，只有调用super之后，才可以使用this关键字
  <br> }
  <br> //constructor方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。
  <br> update(camera){
  <br> super.update()
  <br> }
  <br> get boneCount(){
  <br> return this.bones.length
  <br> }
  <br> set MatrixType(matrixType){
  <br> this.idMatrix = SkinnedMesh
  <a href="">matrixType</a>;
  <br> }
  <br> static defaultMatrix(){
  <br> return new THREES.Matrix4();
  <br> }
  <br>}</p>
<p>########################################################</p>
<p>四、For…of</p>
<p>迭代器的新类型，可以替代for..in。 它返回的是值而不是keys
  <br>let list = [4, 5, 6];
  <br>console.log(list)
  <br>for (let i of list) {
  <br> console.log(i);
  <br>}
  <br>list -&gt; [4,5,6]
  <br>i -&gt; 4
  <br>i -&gt; 5
  <br>i -&gt; 6</p>
<p>没有对比就没有伤害，看这里👇
  <br>for(let i in list){
  <br> console.log(i)
  <br>}
  <br>list -&gt; [4,5,6]
  <br>i -&gt; 0
  <br>i -&gt; 1
  <br>i -&gt; 2</p>
<p>########################################################</p>
<p>五、Set</p>
<p>Set 为数学对应，其中所有项目都是唯一的
  <br>var set = new Set();
  <br>set.add(“Potato”).add(“Tomato”).add(“Tomato”)
  <br>console.log(set.size)
  <br>console.log(set.has(“Tomato”))
  <br>for(var item of set) {
  <br> console.log(item)
  <br>}</p>
<p>set.size -&gt; 2
  <br>set.has(“Tomato”) -&gt; true
  <br>item -&gt; Potato
  <br>item -&gt; Tomato</p>
<p>########################################################</p>
<p>六、Rest</p>
<p>我们可以使用 rest 操作符来允许无限参数 rest …
  <br>function demo(part1,…part2){
  <br> return {part1,part2}
  <br>}
  <br>console.log(demo(1,2,3,4,6))
  <br>demo(1,2,3,4,5,6) -&gt; {“part1”:1,”part2”:[2,3,4,5,6]}</p>
<p>########################################################</p>
<p>七、Map</p>
<p>var map = new Map();
  <br>map.set(“Potato”,12)
  <br>map.set(“Tomato”,34)
  <br>console.log(map.get(“Potato”))
  <br>for(let item of map){
  <br> console.log(item)
  <br>}</p>
<p>map.get(“Potato”) -&gt; 12
  <br>item -&gt; [“Potato”,12]
  <br>item -&gt; [“Tomato”,34]</p>
<p>for(let item in map){
  <br> console.log(item)
  <br>}</p>
<p>//undefined</p>
<p>可以使用除字符串之外的其他类型。
  <br>var map = new Map();
  <br>var key = {a: “a”}
  <br>map.set(key, 12);</p>
<p>console.log(map.get(key))
  <br>console.log(map.get({a: “a”}))</p>
<p>map.get(key) -&gt; 12
  <br>map.get({a: “a”}) -&gt; undefined</p>
<p>########################################################</p>
<p>八、WeakMap</p>
<p>使用键的对象，并且只保留对键的弱引用。
  <br>var wm = new WeakMap();</p>
<p>var o1 = {}
  <br>var o2 = {}
  <br>var o3 = {}</p>
<p>wm.set(o1,1)
  <br>wm.set(o2,2)
  <br>wm.set(o3,{a:”a”})
  <br>wm.set({},4)</p>
<p>console.log(wm.get(o2))
  <br>console.log(wm.has({}))</p>
<p>delete o2;
  <br>console.log(wm.get(o3))</p>
<p>for(let item in wm) {
  <br> console.log(item)
  <br>}
  <br>for(let item of wm) {
  <br> console.log(item)
  <br>}
  <br>接下来让我们来看一下输出的结果吧
  <br>wm.get(o2) -&gt; 2
  <br>wm.has({}) -&gt; false
  <br>wm.get(o3) -&gt; {“a”:”a”}
  <br>没有size属性,没有办法遍历它的成员
  <br>TypeError: wm[Symbol.iterator] is not a function</p>
<p>surprise！！！🎉 有没有很惊喜吖 是不是和想的不一样捏
  <br>吼吼 稳住 我们能赢
  <br>让我们趁热打铁，来迎接下一个暴击</p>
<p>########################################################</p>
<p>九、WeakSet</p>
<p>也是不重复的值的集合
  <br>WeakSet 的成员只能是对象
  <br>WeakSet对象允许您在集合中存储弱持有的对象,没有引用的对象将被垃圾回收</p>
<p>var item = {a:”Potato”}
  <br>var set new WeakSet();</p>
<p>set.add({a:”Potato”}).add(item).add({a:”Tomato”}).add({a:”Tomato”})
  <br>console.log(set.size)
  <br>console.log(set.has({a:”Tomato”}))
  <br>console.log(set.has(item))</p>
<p>for(let item of set) {
  <br> console.log(item)
  <br>}
  <br>※※※ ➡ WeakSet没有size属性,没有办法遍历它的成员</p>
<p>接下来让我们再来看一下输出的结果吧！！！！
  <br>set.size -&gt; undefined
  <br>set.has({a:”Tomato”}) -&gt; false
  <br>set.has(item) -&gt; true
  <br>TypeError: set[Symbol.iterator] is not a function</p>
<p>号外号外 📢
  <br>const a = [[1, 2], [3, 4]];
  <br>const ws = new WeakSet(a);
  <br>// WeakSet {[1, 2], [3, 4]}
  <br>注意，是a数组的成员成为 WeakSet 的成员，而不是a数组本身。这意味着，数组的成员只能是对象</p>
<p>########################################################</p>
<p>十、关于This</p>
<p>var object = {
  <br> name:”Name”,
  <br> arrowGetName:() =&gt; this.name,
  <br> regularGetName:function(){ return this.name },
  <br> arrowGetThis:() =&gt; this,
  <br> regularGetThis:function(){ return this }
  <br>}
  <br>console.log(object.arrowGetName())
  <br>console.log((object.arrowGetThis())
  <br>console.log(this)
  <br>console.log(object.regularGetName())
  <br>console.log(object.regularGetThis())</p>
<p>object.arrowGetName() -&gt;
  <br>object.arrowGetThis() -&gt; [object Window]
  <br>this -&gt; [object Window]
  <br>object.regularGetName() -&gt; Name
  <br>object.regularGetThis() -&gt; {“name”:”Name”}</p>
<p>小葵花妈妈课堂开课了，小仙女感冒老不好，多半是废了。。。。。。。。
  <br>各位道友们，咱们下一章见。。。咳咳。。。小仙女要去吃药了</p>
<p>想继续的宝宝 戳一戳 去下一弹👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p>
<p>
  <a href="http://icey-monopolize.com/2017/11/02/ES6%E7%AC%AC%E4%BA%8C%E5%BC%B9/">http://icey-monopolize.com/2017/11/02/ES6%E7%AC%AC%E4%BA%8C%E5%BC%B9/</a>
</p>
<p>🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆🎆</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[This Is the Beginning of the Story]]></title>
      <url>/2017/11/01/Website/</url>
      <content type="html"><![CDATA[<p>忘了是什么时间，忘了在什么地点，只记得有人写过这样的话。。。</p>
<p>我走过山的时候，山不说话
  <br>我路过海的时候，海不说话
  <br>我坐着的毛驴一步一步滴滴答答
  <br>我带着的倚天喑哑
  <br>大家说我因为爱着杨过大侠
  <br>找不到 所以在峨眉安家
  <br>其实我只是喜欢峨眉的雾
  <br>像十六岁那年绽放的烟花</p>
<p>我路过海的时候，海不说话
  <br>我走过山的时候也听不到回答
  <br>我骑的毛驴 步步滴滴答答
  <br>悠悠飘向远处可从不想要回家
  <br>正当喜乐无忧年 韶华如花
  <br>远游风尘之色却不似十九风华
  <br> –程灵素</p>
]]></content>
      
        
        <tags>
            
            <tag> ALL </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端面试题 </tag>
            
            <tag> ES6 </tag>
            
            <tag> HTML </tag>
            
            <tag> WEBPACK </tag>
            
            <tag> WEBFRAME </tag>
            
            <tag> NODEJS </tag>
            
            <tag> PIT </tag>
            
            <tag> ARTICAL </tag>
            
            <tag> LIFT </tag>
            
            <tag> SENTIMENTS </tag>
            
            <tag> JS </tag>
            
            <tag> JQ </tag>
            
            <tag> H5 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css">
</head>

<body>
  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">
  </script>
  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>
  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script>
</body>

</html>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Photoes]]></title>
      <url>/photoes/index.html</url>
      <content type="html"><![CDATA[
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[
]]></content>
    </entry>
    
  
</search>
